{"version":3,"sources":["components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","column","Button","onStart","onStop","onRestart","status","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","tick","setTick","setStatus","direction","setDirection","body","setBody","setDifficulty","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMyself","newBody","removingTrack","pop","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00324a89.chunk.js","sourcesContent":["\nconst Navigation = ({length, difficulty = 3, onChangeDifficulty}) => {\n\n  /* 難易度変更ボタン */\n  // 表示部分を変更するメソッドと、difficultyの加減算をApp.jsに渡す。\n  const upVisibility = difficulty < 5 ? '' : 'is-hidden';\n  const downVisibility = difficulty > 1 ? '' : 'is-hidden';\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n\n  return (\n    <div className='navigation'>\n      <div className='navigation-item'>\n        <span className='navigation-label'>Length: </span>\n        <div className='navigation-item-number-container'>\n          <div className='num-board'>{length}</div>\n        </div>\n      </div>\n      <div className='navigation-item'>\n        <span className='navigation-label'>Difficulty: </span>\n        <div className='navigation-item-number-container'>\n          <span className='num-board'>{difficulty}</span>\n          <div className='difficulty-button-container'>\n            <div className={`difficulty-button difficulty-up ${upVisibility}`} onClick={onUpDifficulty}></div>\n            <div className={`difficulty-button difficulty-down ${downVisibility}`} onClick={onDownDifficulty}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default Navigation;","\nconst Field = ({fields}) => {\n\n  return (\n    <div className=\"field\">\n      {\n        fields.map((row) => { // 列を取り出す\n          return row.map((column) => { // colsを取り出す\n            return (\n            <div className={`dots ${column}`}></div> // 各colsにはcolumnのデータが格納されている\n            )\n          })\n        })\n      }\n    </div>\n  )\n};\n\nexport default Field;","\nconst Button = ({onStart, onStop, onRestart, status}) => {\n  return (\n    <div className=\"button\">\n      {/* ゲーム状態に応じて表示するボタンを変更する（三項演算子）*/}\n      {status === 'gameover' && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n      {status === 'init' && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n      {status === 'suspended' && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n      {status === 'playing' && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n    </div>\n  )\n};\n\nexport default Button;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight\n} from '@fortawesome/free-solid-svg-icons';\n\nconst ManipulationPanel = ({onChange}) => {\n\n  /* Clickイベント */\n  // App.jsで定義したonChangeDirectionメソッドを利用する\n  const onUp = () => onChange('up');\n  const onRight = () => onChange('right');\n  const onLeft = () => onChange('left');\n  const onDown = () => onChange('down');\n  \n  return (\n  <div className=\"manipulation-panel\">\n    <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}><FontAwesomeIcon icon={faArrowLeft} /></button>\n    <div>\n      <button className=\"manipulation-btn btn btn-up\" onClick={onUp}><FontAwesomeIcon icon={faArrowUp} /></button>\n      <button className=\"manipulation-btn btn btn-down\" onClick={onDown}><FontAwesomeIcon icon={faArrowDown} />\n</button>\n    </div>\n    <button className=\"manipulation-btn btn btn-right\" onClick={onRight}><FontAwesomeIcon icon={faArrowRight} /></button>\n  </div>\n  );\n};\n\nexport default ManipulationPanel;","/*--------------------------------\nindex.js\nField.jsxで使うFieldを生成するコンポーネント。\nApp.jsからfieldSizeとinitialPositionをPropsで受け取っている。\nField/food/snakeの位置情報をデータとして保持するためのもの。\nfieldSize = 列数 をパラメータとして受け取って正方形の配列を生成する。\n--------------------------------*/\n\n/* getFoodPosition */\n// foodの位置はランダム配置だが、snakeの位置を除外する必要がある。\nexport const getFoodPosition = (fieldSize, excludes) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1; // fieldSize(0~34), 端を除く-1 & +1\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1; // fieldSize(0~34), 端を除く-1 & +1\n    const conflict = excludes.some(item => item.x === x && item.y === y) // some関数内の少なくとも一つの要素がtrueか判定する。\n\n    if (!conflict) { // snakeと同位置ではない場合のみ\n      return {x, y}; // foodの座標をオブジェクトで返す。\n    }\n  };\n};\n\n/* initFields */\nexport const initFields = (fieldSize, snake) => { // <--- 引数2は App.js の initPosition = { x, y }のこと。\n\n  const fields = []; // 一旦から配列として初期化する。\n\n  for (let i = 0; i < fieldSize; i++) { // 列ごとに繰り返し処理\n    const cols = new Array(fieldSize).fill('') // 正方形となるよう、列数と同数の''を含むcolsを作成。\n    fields.push(cols) // fields配列に末尾から追加する。\n  };\n\n  /* snake初期位置 */\n  fields[snake.x][snake.y] =\"snake\"; // className={dot snake}となり色が指定される。\n\n  /* foodの初期位置 */\n  const food = getFoodPosition(fieldSize, [snake]); // 引数2はexcludes = snakeの現在位置\n  fields[food.x][food.y] = 'food';\n\n  return fields;\n};\n\n/*\nfields = [ [col, cols, ...], [col, cols, ...], ... ]という入れ子状態の配列ができる\n\n\n*/","/*--------------------------------\nApp.js\nトップレベルのコンポーネント。\nStateや各種メソッドを格納し、下層コンポーネントをまとめている\n--------------------------------*/\n\nimport { useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport { initFields, getFoodPosition } from './utils/index';\n\n/* snakeの初期位置 */\nconst initialPosition = {x: 17, y: 17}; // useStateは初期値にオブジェクトを持てない。 ---> useEffectで設定\n\n/* Fieldのサイズ指定 */\n// const initialValues = initFields(35); ---> snakeの位置も動的に管理したいので以下の通り変更する。\nconst initialValues = initFields(35, initialPosition);\n\n/* difficultyの設定と状態保持 */\n// setIntervalの第2引数に渡す変数、数字が小さいほどsnakeの移動速度が速い。\nconst defaultDifficulty = 3; // Difficulty[3]という意味なので100msのこと。\nconst Difficulty = [1000, 500, 100, 50, 3];\n\n/* GameStatus */\n// ゲームの状態を文字列で管理する\n// 例えば別のメソッドの中で GameStatus.gameover とすると状態をgameoverにすることができる\n// 定数で一元管理することでタイポや値変化に強くなる\nconst GameStatus = Object.freeze( // Object.freezeメソッド = オブジェクトを凍結し変更できなくする。\n  {\n    init: 'init',\n    playing: 'playing',\n    suspended: 'suspended',\n    gameover: 'gameover'\n  }\n);\n\n/* Direction */\n// ボタン入力に従いsnakeの移動方向を変更する\nconst Direction = Object.freeze( // Object.freezeメソッド = オブジェクトを凍結し変更できなくする。\n  {\n    up: 'up',\n    right: 'right',\n    left: 'left',\n    down: 'down'\n  }\n);\n\n/* DirectionKeyCodeMap */\n// キーボード操作のため矢印キーのKeyコードとDirectionを紐付ける\nconst DirectionKeyCodeMap = Object.freeze(\n  {\n    37: Direction.left,\n    38: Direction.up,\n    39: Direction.right,\n    40: Direction.down\n  }\n);\n\n/* oppositeDirection */\n// 逆方向に行かないように進行方向の逆を把握する\nconst OppositeDirection = Object.freeze( // Object.freezeメソッド = オブジェクトを凍結し変更できなくする。\n  {\n    up: 'down',\n    right: 'left',\n    left: 'right',\n    down: 'up'\n  }\n);\n\n/* Delta */\n// 座標の変化量を方向別に管理する\nconst Delta = Object.freeze(\n  {\n    up: {x: 0 , y: -1 },\n    right: {x: 1 , y: 0 },\n    left: {x: -1, y: 0 },\n    down: {x: 0 , y: 1 }\n  }\n);\n\n/* timer */\nconst defaultInterval = 100;\nlet timer = undefined; // undefinedはboolean値でfalseと判断される。\n\n/* unsubscribe */\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  } else {\n    clearInterval(timer)\n  }\n};\n\n/* isCollision */\n// boolean値 Field外に出てしまったらGameOverになる。\nconst isCollision = (fieldSize, position) => { // パラメータにfieldとpositionをもらう。\n  if (position.x < 0 || position.y < 0) { // positionが各軸下限のとき\n    return true;\n  }\n  if (position.x > fieldSize - 1 || position.y > fieldSize -1) { // positionが各軸上限のとき\n    return true;\n  }\n  return false;\n};\n\n/* isEatingMyself */\n// 次のpositionがsnakeかどうかを判定する\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === \"snake\";\n};\n\n\n/* Appコンポーネント */\nconst App = () => {\n\n  /* state管理 */\n  const [fields, setFields] = useState(initialValues); // fieldの状態管理\n  const [tick, setTick] = useState(0); // position === undefinedのままsetIntervalが実行されないように変数をセットする。\n  const [status, setStatus] = useState(GameStatus.init) // ゲームの状態管理（初期値は init ）\n  const [direction, setDirection] = useState(Direction.up) // 進行方向（初期値は up ）\n  const [body, setBody] = useState([]); // snakeの体の長さ[配列として管理]\n  const [difficulty, setDifficulty] = useState(defaultDifficulty); // ゲーム難易度\n\n  /* useEffect */\n  useEffect(() => { // snakeの初期値オブジェクトを初回描画時のみレンダリングする。\n    setBody([initialPosition]); // snakeの初期位置位置を描画する。\n    const interval = Difficulty[difficulty -1] // 配列[0~4]の中から選択する。\n    timer = setInterval(() => { // コールバック関数をdefaultIntervalミリ秒ごとに呼び出す。\n      setTick((tick) => tick + 1); // 一定間隔でレンダリングするようにする<------------------------- ???\n    },interval);\n    return unsubscribe; // useEffect内のreturnはコンポーネントが削除されるタイミングで実行される。\n  },[difficulty]);\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) { // 初回レンダリング時には position === undefined\n      return;\n    } else {\n      const canContinue = handleMoving(); // <--- handleMovingメソッドが返すboolean値を受け取る。\n      if (!canContinue) {\n        unsubscribe();\n        setStatus(GameStatus.gameover);\n      }\n    }\n  // eslint-disable-next-line\n  },[tick]); // tickが更新されるたびにこのuseEffectが発火する。依存関係Warning出るので上記コメント挿入\n\n\n/* onStart */\n// スタートボタンでGameStatusをPlayingにするためのメソッド\nconst onStart = () => {\n  return (\n    setStatus(GameStatus.playing)\n  )\n};\n\n/* onStop */\nconst onStop = () => {\n  return (\n    setStatus(GameStatus.suspended)\n  )\n};\n\n/* onRestart */\n// 1.タイマー 2.ステータス 3.snakeの位置 4.フィールド を初期化する。\nconst onRestart = () => {\n  timer = setInterval(() => {\n    setTick(tick => tick + 1)\n  },defaultInterval);\n  setDirection(Direction.up); // <--- 教材ではResetボタン実装時に追加しているが、方向管理実装時にすべき。\n  setStatus(GameStatus.init); // init状態にする。\n  setBody([initialPosition]); // snakeのbodyの長さを初期状態に戻す。\n  setDirection(Direction.up); // ゲームスタート時まず上に向かう。\n  setFields(initFields(35, initialPosition)); // fieldとsnakeの描画を初期状態に戻す。\n}\n\n/* onChangeDirection */\n// ゲームプレイ中だけボタン操作可能\n// ボタンで方向を変更する。（進行方向と逆方向へは変更できない）\n// useCallback(()=>{},[]) : 依存する関数の更新時に再レンダーするため、関数をメモ化できるHook\n// 関数は描画ごとに新しいものとして再生成される。その計算を省略できるので、無駄な処理が少なくて済む。\n// => useMemo()と同義、useMemoはあくまで値を保存するために使う。\nconst onChangeDirection = useCallback((newDirection) => { // ManipulationPanel.jsxからonChangeの引数を受け取る。\n  if (status !== GameStatus.playing) { // プレイ中でない場合はそのままの状態を保持する。\n    return direction;\n  }\n  if (OppositeDirection[direction] === newDirection) { // 入力値が進行方向と逆方向の場合は無視する。\n    return;\n  }\n\n  setDirection(newDirection); // 問題なければ押下したボタンに対応した進行方向へ変更する。\n},[direction, status]); // directionまたはstatusが更新されるたびに発火する。\n\n/* onChangeDifficulty */\n// 難易度設定の実装\n// 無駄な関数再生成を回避するためにuseCallBackを使う。\nconst onChangeDifficulty = useCallback((difficulty) => { // メモ化しておく\n  if (status !== GameStatus.init) { // gameが始まっていない場合\n    return;\n  }\n  if (difficulty < 1 || difficulty > difficulty.length) { // 現在の難易度が最低もしくは最高の場合\n    return;\n  }\n\n  setDifficulty(difficulty) // 難易度ステートを変更する。\n  // eslint-disable-next-line\n}, [status, difficulty]); // statusとdifficultyに変更があった時onChangeDifficultyを呼び出す。\n\n\n/* handleKeyDown */\n// keydownとonChangeDirectionを結びつける。\nuseEffect(() => {\n  const handleKeyDown =  (e) => { // 押下したキーの割り当て番号をパラメータに持つ。\n    const newDirection = DirectionKeyCodeMap[e.keyCode]; // Map[index]のインスタンスをnewDirectionに代入する。\n    if (!newDirection) {\n      return;\n    }\n    onChangeDirection(newDirection);\n  };\n\n  document.addEventListener('keydown', handleKeyDown);\n  return () => document.removeEventListener('keydown', handleKeyDown) // componentWillUnmount（リソースの解放）\n},[onChangeDirection]); // ボタンが押下され、onChangeDirectionが再レンダーするたびに発火する。\n\n\n/* handleMoving */\n// Buttonに応じて進行方向を変更するメソッド\n// snakeの長さ管理も行う\n  const handleMoving = () => {\n    const {x, y} = body[0]; // bodyの先頭を分割代入。\n    // const nextY = Math.max(y -1, 0); // y-1 or 0 の大きい方をnextYに代入する。\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    };\n\n    /* Delta[]positionで判定 */\n    // 移動後の座標がField内かどうか or 移動後のcolがsnakeかどうかを調べ、trueならhandleMoving === falseを返す。\n    // useEffectのcanContinueメソッドでゲーム続行か否かを決める。\n    if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n      return false;\n    };\n\n    const newBody = [...body]; // body対して.popや.unshiftなど破壊的メソッドがあるため、参照コピーしておく。\n    if (fields[newPosition.y][newPosition.x] !== 'food') { // エサを食べない場合\n      // 紛らわしいがfields[列][cols]:初めにY軸,2つ目にX軸の位置情報を持つ。\n      const removingTrack = newBody.pop(); // 配列から最後の要素を取り除き、その要素を返す。\n      fields[removingTrack.y][removingTrack.x] = ''; // 取り除いた要素の座標にある中身を空にする。\n    } else { // エサを食べる場合\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]) // 引数2はsnakeの現在位置\n      fields[food.y][food.x] = \"food\"; // 再度ランダムでfood出現\n    }\n\n    fields[newPosition.y][newPosition.x] = 'snake'; // 移動後の座標をsnakeのbodyにする。\n    newBody.unshift(newPosition); // コピーしたbodyの先頭にnewPosition({x,y})を追加する。\n    setBody(newBody); // 大元のbodyに移動後の座標を追加する\n    setFields(fields); // positionを更新したfields.jsで作成したFieldを描画する。\n    return true;\n  };\n  \n\n\n  return ( // コンポーネントの描画\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation length={body.length} difficulty={difficulty} onChangeDifficulty={onChangeDifficulty} />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} /> {/* fieldsのパラメータにサイズを渡す */}\n      </main>\n      <footer className=\"footer\">\n        <Button onStart={onStart} onStop={onStop} onRestart={onRestart} status={status} />\n        <ManipulationPanel onChange={onChangeDirection} /> {/* 操作パネルに向き情報を渡す */}\n      </footer>\n    </div>\n  )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}